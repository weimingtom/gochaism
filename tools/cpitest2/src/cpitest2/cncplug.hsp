;-----------------------------------------------------------
; cncplug.hsp -- written by gocha
;-----------------------------------------------------------

#ifndef CNCPLUG_INCLUDED
#define CNCPLUG_INCLUDED

#define global CPI_SYSVER          0x00000100

#define global CPI_TYPE_CHECK      0x00000001
#define global CPI_TYPE_CONVERT    0x00000002

#module

#uselib "kernel32.dll"
#cfunc LoadLibrary "LoadLibraryA" str
#func  FreeLibrary "FreeLibrary" int
#cfunc GetProcAddress "GetProcAddress" int, str
#cfunc lstrlen "lstrlenA" sptr
#func  lstrcpy "lstrcpyA" sptr, sptr

#define true    1
#define false   0

#deffunc cpi_init

	sdim cpi_list, 0x1000
	dirlist cpi_list, "plugins", 5
	if (stat == 0) {
		dialog "plugins directory not found", 0, "cpi plugin system error"
		end
	}
	chdir "plugins"

	dirlist cpi_list, "*.cpi", 3
	notesel cpi_list
	cpi_num = notemax
	noteunsel
	if (cpi_num == 0) {
		sdim cpi_list, 64
		return 0
	}

	dim cpi_hdll, cpi_num
	dim cpi_ver, cpi_num
	dim cpi_type, cpi_num
	sdim cpi_path, 260, cpi_num

	dim cpi_GetPluginSystemInfo, cpi_num
	dim cpi_GetPluginInfo, cpi_num
	dim cpi_GetSupportedList, cpi_num
	dim cpi_CheckData, cpi_num

	p = 0
	repeat cpi_num
		getstr cpi_path.cnt, cpi_list, p: p += strsize
		cpi_path.cnt = cpi_path.cnt
		cpi_hdll.cnt = LoadLibrary(cpi_path.cnt)

		cpi_GetPluginSystemInfo.cnt = GetProcAddress(cpi_hdll.cnt, "cpiGetPluginSystemInfo")
		cpi_GetPluginInfo.cnt = GetProcAddress(cpi_hdll.cnt, "cpiGetPluginInfo")
		cpi_GetSupportedList.cnt = GetProcAddress(cpi_hdll.cnt, "cpiGetSupportedList")
		cpi_CheckData.cnt = GetProcAddress(cpi_hdll.cnt, "cpiCheckData")

		dim csi, 2: prm = varptr(csi)
		ret = callfunc(prm, cpi_GetPluginSystemInfo.cnt, 1)
		cpi_ver.cnt = csi.0
		cpi_type.cnt = csi.1
	loop
	sdim cpi_list, 64

	chdir ".."
	initialized = true
return

#defcfunc cpi_enum
return cpi_num

#deffunc cpi_info int p1, var p2, var p3, var p4, var p5
	cpi_pext = callfunc(prm, cpi_GetSupportedList.p1, 0)
	sdim _cpi_ext, lstrlen(cpi_pext) + 1
	lstrcpy varptr(_cpi_ext), cpi_pext

	dim cpi_cvi, 2
	prm = varptr(cpi_cvi)
	ret = callfunc(prm, cpi_GetPluginInfo.p1, 1)
	sdim _cpi_info_name, lstrlen(cpi_cvi.0) + 1
	lstrcpy varptr(_cpi_info_name), cpi_cvi.0
	sdim _cpi_info_ver, lstrlen(cpi_cvi.1) + 1
	lstrcpy varptr(_cpi_info_ver), cpi_cvi.1

	p2 = cpi_path.p1
	p3 = _cpi_ext
	p4 = _cpi_info_name
	p5 = _cpi_info_ver

	sdim _cpi_ext, 64
	sdim _cpi_info_name, 64
	sdim _cpi_info_ver, 64
return

#uselib "cpitest2.hpi"
#cfunc global _cpi_match "_cpi_match" int, sptr, int, var, var, var, int
;#defcfunc _cpi_match int cpi_num_dummy, int cpi_CheckData_dummy, int search_size, var cfi, var buf, var offset, int buffer_size
;	dim _cfi, 2
;	match_break = false
;	repeat search_size: search_offset = cnt
;		repeat cpi_num
;			prm = varptr(_cfi), varptr(buf) + offset + search_offset, buffer_size - search_offset, 0
;			match_result = callfunc(prm, cpi_CheckData.cnt, 4)
;			if (match_result) {
;				memcpy cfi, _cfi, 8
;				match_break = true: break	; return
;			}
;		loop
;		if (match_break): break
;	loop
;	offset += search_offset
;return match_result

#defcfunc cpi_match int search_size, var filename, var filesize, var buf, var offset, int buffer_size
	dim cfi, 2
	match_result = _cpi_match(cpi_num, varptr(cpi_CheckData), search_size, cfi, buf, offset, buffer_size)
	if (match_result) {
		sdim _filename, lstrlen(cfi.0) + 1
		lstrcpy varptr(_filename), cfi.0
		filename = _filename
		filesize = cfi.1
	}
return match_result

#deffunc cpi_uninit onexit
	if (initialized) {
		repeat cpi_num
			FreeLibrary cpi_hdll.cnt
		loop
	}
	initialized = false
return

#global

#endif ; !defined(CNCPLUG_INCLUDED)
